# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: oTree\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-05-19 17:05-0600\n"
"PO-Revision-Date: 2021-06-01 10:45+0800\n"
"Last-Translator: matrixlt <wangmatrixlt@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"
"X-Generator: Poedit 2.4.3\n"

#: ../../source/rounds.rst:2
msgid "Apps & rounds"
msgstr "应用&轮次"

#: ../../source/rounds.rst:5
msgid "Apps"
msgstr "应用"

#: ../../source/rounds.rst:7
msgid ""
"An oTree app is a folder containing Python and HTML code. A project contains "
"multiple apps. A session is basically a sequence of apps that are played one "
"after the other."
msgstr ""
"一个oTree应用就是一个包含Python与HTML代码的文件夹。一个项目包含多个应用。一个"
"会话基本上就是一个接一个被游玩的应用序列。"

#: ../../source/rounds.rst:12
msgid "Combining apps"
msgstr "组合应用"

#: ../../source/rounds.rst:14
msgid "You can combine apps by setting your session config's ``app_sequence``."
msgstr "你可以通过设置session config的 ``'app_sequence'`` 来组合应用。"

#: ../../source/rounds.rst:17
msgid "Passing data between apps"
msgstr "在应用之间传递数据"

# vars -> fields
#: ../../source/rounds.rst:19
msgid ""
"See :ref:`participant fields <vars>` and :ref:`session fields <session_vars>`."
msgstr ""
"参考 :ref:`participant fields <vars>` 与 :ref:`session fields "
"<session_vars>`。"

#: ../../source/rounds.rst:25
msgid "Rounds"
msgstr "轮次"

#: ../../source/rounds.rst:27
msgid ""
"You can make a game run for multiple rounds by setting ``Constants."
"NUM_ROUNDS``. For example, if your session config's ``app_sequence`` is "
"``['app1', 'app2']``, where ``app1`` has ``NUM_ROUNDS = 3`` and ``app2`` has "
"``NUM_ROUNDS = 1``, then your sessions will contain 4 subsessions."
msgstr ""
"你可以通过设置 ``C.NUM_ROUNDS`` 来使一个游戏进行多轮。举例来说，如果你"
"的session config中的 ``app_sequence`` 是 ``['app1', 'app2']``，同时 ``app1`` "
"中 ``NUM_ROUNDS = 3`` 且 ``app2`` 中 ``NUM_ROUNDS = 1``，那么你的会话中就包含4"
"个子会话。"

#: ../../source/rounds.rst:34
msgid "Round numbers"
msgstr "轮数"

#: ../../source/rounds.rst:36
msgid ""
"You can get the current round number with ``player.round_number`` (this "
"attribute is present on subsession, group, and player objects). Round numbers "
"start from 1."
msgstr ""
"你可以通过 ``player.round_number`` （目前subsession，group，player 与 page 对"
"象有此属性）来获得当前的轮数。轮数从1开始。"

#: ../../source/rounds.rst:43
msgid "Passing data between rounds or apps"
msgstr "在应用或轮次之间传递数据"

#: ../../source/rounds.rst:45
msgid ""
"Each round has separate subsession, ``Group``, and ``Player`` objects. For "
"example, let's say you set ``player.my_field = True`` in round 1. In round 2, "
"if you try to access ``player.my_field``, you will find its value is "
"``None``. This is because the ``Player`` objects in round 1 are separate from "
"``Player`` objects in round 2."
msgstr ""
"每一轮都拥有独立的subsession， ``Group``, 与 ``Player`` 对象。举例来说，假定你"
"在第一轮中设定了 ``player.my_field = True`` 。在第二轮时，你试图访问 ``player."
"my_field``，你会发现它的值是 ``None``。这是因为第一轮的 ``Player`` 对象与第二"
"轮的 ``Player`` 对象是独立的。"

#: ../../source/rounds.rst:52
msgid ""
"To access data from a previous round or app, you can use one of the "
"techniques described below."
msgstr "为了获得之前轮次或者应用的数据，你可以使用下面描述的这些技巧。"

#: ../../source/rounds.rst:56
msgid "in_rounds, in_previous_rounds, in_round, etc."
msgstr "in_rounds, in_previous_rounds, in_round, etc."

#: ../../source/rounds.rst:58
msgid "Player, group, and subsession objects have the following methods:"
msgstr "Player，group 与 subsession 对象有下面这些方法："

#: ../../source/rounds.rst:60
msgid "in_previous_rounds()"
msgstr "in_previous_rounds()"

#: ../../source/rounds.rst:61
msgid "in_all_rounds()"
msgstr "in_all_rounds()"

#: ../../source/rounds.rst:62
msgid "in_rounds()"
msgstr "in_rounds()"

#: ../../source/rounds.rst:63
msgid "in_round()"
msgstr "in_round()"

#: ../../source/rounds.rst:65
msgid ""
"For example, if you are in the last round of a 10-round game, ``player."
"in_previous_rounds()`` will return a list with 9 player objects, which "
"represent the current participant in all previous rounds."
msgstr ""
"举例来说，如果你在一个10轮游戏的最后一轮， ``player.in_previous_rounds()`` 会"
"返回一个由9个player对象组成的列表，就代表了当前参与者在之前轮次的对象。"

#: ../../source/rounds.rst:69
msgid ""
"``player.in_all_rounds()`` is almost the same but the list will have 10 "
"objects, because it includes the current round's player."
msgstr ""
"``player.in_all_rounds()`` 几乎与上面相同，只不过列表中有10个对象，因为它包含"
"了当前轮次的player对象。"

#: ../../source/rounds.rst:72
msgid ""
"``player.in_rounds(m, n)`` returns a list of players representing the same "
"participant from rounds ``m`` to ``n``."
msgstr ""
"``player.in_rounds(m, n)`` 返回一个player对象的列表，其中代表了同一参与人第 "
"``m`` 到 ``n`` 轮的player对象。"

# Chris comment: I moved the code out of the text into a separate block.
#: ../../source/rounds.rst:74
msgid ""
"``player.in_round(m)`` returns just the player in round ``m``. For example, "
"to get the player's payoff in the previous round, you would do:"
msgstr ""
"``player.in_round(m)`` 返回第 ``m`` 轮的player对象。举例来说，要获得玩家前一轮"
"的收益，可用："

#: ../../source/rounds.rst:83
msgid ""
"These methods work the same way for subsessions (e.g. ``subsession."
"in_all_rounds()``)."
msgstr ""
"这些方法对于subsession也是相同的（例如 ``subsession.in_all_rounds()``）。"

#: ../../source/rounds.rst:85
msgid ""
"They also work the same way for groups, but it does not make sense to use "
"them if you re-shuffle groups between rounds."
msgstr ""
"这些方法对于group也是相同的，但是如果你在轮次之间重新安排了小组，那么使用这些"
"方法是没有意义的。"

#: ../../source/rounds.rst:91
msgid "Participant fields"
msgstr "参与人字段"

#: ../../source/rounds.rst:95
msgid ""
"As of March 2021, this is a new **optional** syntax for ``participant.vars``. "
"Instead of setting ``participant.vars['my_field'] = 1``, you can now set "
"``participant.my_field = 1`` directly. Just make sure to define "
"``PARTICIPANT_FIELDS`` first. See `here <https://groups.google.com/g/otree/c/"
"lbJg_ND5QkY>`__ for more info."
msgstr ""
"在2021年3月， ``participant.vars`` 有一种新的 **可选** 语法。你可以直接设置 "
"``participant.my_field = 1`` 而不是设置 ``participant.vars['my_field'] = 1``。"
"只需确保你提前定义了 ``PARTICIPANT_FIELDS`` 。参考 `这里 <https://groups."
"google.com/g/otree/c/lbJg_ND5QkY>`__ 以获得更多信息。"

#: ../../source/rounds.rst:101
msgid ""
"If you want to access a participant's data from a previous app, you should "
"store this data on the participant object, which persists across apps (see :"
"ref:`participants_and_players`). (``in_all_rounds()`` only is useful when you "
"need to access data from a previous round of the same app.)"
msgstr ""
"如果你想要获取一位参与人在之前应用中的数据，你应当将数据存储在参与人对象中，这"
"样数据可以在不同应用间保持。（参考 :ref:`participants_and_players`）。"
"（``in_all_rounds()`` 仅在你需要获取同一应用中的之前轮次的数据时有用。）"

#: ../../source/rounds.rst:107
msgid ""
"Go to settings and define ``PARTICIPANT_FIELDS``, which is a list of the "
"names of fields you want to define on your participant."
msgstr ""
"设置并定义 ``PARTICIPANT_FIELDS``，它是一个列表，包含了你想要在参与人上定义的"
"字段名称。"

#: ../../source/rounds.rst:110
msgid "Then in your code, you can get and set any type of data on these fields:"
msgstr "在代码中，你可以取出或设置这些字段上的任何类型的数据："

#: ../../source/rounds.rst:116
msgid ""
"(Internally, all participant fields are stored in a dict called ``participant."
"vars``. ``participant.xyz`` is equivalent to ``participant.vars['xyz']``.)"
msgstr ""
"（在内部，所有参与人字段均存储在一个名为 ``participant.vars`` 的字典中。"
"``participant.xyz`` 等价于 ``participant.vars['xyz']``。）"

# vars -> fields
# (although the part with str(participant.vars) is the same as before)
#: ../../source/rounds.rst:119
msgid ""
"Participant fields are not included in the Excel/CSV data export, or in the "
"\"Data\" tab in the session admin. If you want that, you should either use :"
"ref:`custom-export` or save ``str(participant.vars)`` into a "
"``LongStringField``. (The same concept applies for session fields.)"
msgstr ""
"参与人字段不包括在Excel/CSV数据导出中，也不在会话admin界面的\"Data\"标签下。如"
"果你需要这种数据，你应当使用 :ref:`custom-export` 或保存 ``str(participant."
"vars)`` 到一个 ``LongStringField`` 中。（相同的概念适用于会话字段。）"

#: ../../source/rounds.rst:127
msgid "Session fields"
msgstr "会话字段"

#: ../../source/rounds.rst:131
msgid "This is a new feature; see the note above about ``PARTICIPANT_FIELDS``."
msgstr "这是一个新特性；参见上面的 ``PARTICIPANT_FIELDS``。"

#: ../../source/rounds.rst:133
msgid ""
"For global variables that are the same for all participants in the session, "
"add them to the ``SESSION_FIELDS``, which works the same as "
"``PARTICIPANT_FIELDS``. Internally, all session fields are stored in "
"``session.vars``."
msgstr ""
"对于会话中所有参与人都相同的全局变量，可将其添加到 ``SESSION_FIELDS`` 中，这"
"与 ``PARTICIPANT_FIELDS`` 用法相同。在内部，会话字段储存在 ``session.vars`` "
"中。"

#: ../../source/rounds.rst:138
msgid "Variable number of rounds"
msgstr "可变轮数"

#: ../../source/rounds.rst:140
msgid "If you want a variable number of rounds, consider using :ref:`live`."
msgstr "如果你想要可变的轮数，考虑使用 :ref:`live`。"

#: ../../source/rounds.rst:142
msgid ""
"Alternatively, you can set ``NUM_ROUNDS`` to some high number, and then in "
"your app, conditionally hide the ``{{ next_button }}`` element, so that the "
"user cannot proceed to the next page, or use :ref:`app_after_this_page`. But "
"note that having many rounds (e.g. more than 100) might cause performance "
"problems, so test your app carefully."
msgstr ""
"作为替代方案，你可以将 ``NUM_ROUNDS`` 设为一个较大的数，然后在应用中，有条件地"
"隐藏 ``{{ next_button }}`` 元素，使得用户无法继续进行到下一页面，或者使用 :"
"ref:`app_after_this_page`。 但是注意轮数较大（例如超过100）可能会导致性能问"
"题，所以请仔细测试你的程序。"
