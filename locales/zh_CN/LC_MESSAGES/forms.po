# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, oTree team
# This file is distributed under the same license as the oTree package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version:  oTree\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-19 16:34+0900\n"
"PO-Revision-Date: 2021-05-28 12:25+0800\n"
"Last-Translator: matrixlt <wangmatrixlt@gmail.com>\n"
"Language: zh_CN\n"
"Language-Team: \n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/forms.rst:4
msgid "Forms"
msgstr "表单"

#: ../../source/forms.rst:6
msgid ""
"Each page in oTree can contain a form, which the player should fill out "
"and submit by clicking the \"Next\" button. To create a form, first you "
"need fields on the player model, for example:"
msgstr ""
"oTree中的每一个页面均可包含表单，玩家填完表单之后点击 \"Next\" "
"按钮即提交了表单。为了创建一个表单，首先你需要在模型中添加字段，举例如下："

#: ../../source/forms.rst:16
msgid "Then, in your Page class, set ``form_model`` and ``form_fields``:"
msgstr "然后在你的Page类中，设置 ``form_model`` 与 ``form_fields``:"

#: ../../source/forms.rst:24
msgid ""
"When the user submits the form, the submitted data is automatically saved"
" to the corresponding fields on the player model."
msgstr "当用户提交表单时，所提交的数据自动保存到模型对应的字段中。"

#: ../../source/forms.rst:30
msgid "Forms in templates"
msgstr "模板中的表单"

#: ../../source/forms.rst:32
msgid "In your template, you can display the form with:"
msgstr "在模板中，你可以像下面这样显示表单："

#: ../../source/forms.rst:41
msgid "Simple form field validation"
msgstr "简单的表单验证"

#: ../../source/forms.rst:44
msgid "min and max"
msgstr "最小值与最大值"

#: ../../source/forms.rst:46
msgid "To require an integer to be between 12 and 24:"
msgstr "验证一个整数在12到24之间："

#: ../../source/forms.rst:52
msgid "If the max/min are not fixed, you should use :ref:`FOO_max`"
msgstr "如果最大值/最小值不是固定的，应当使用 :ref:`FOO_max`"

#: ../../source/forms.rst:57
msgid "choices"
msgstr "选项"

#: ../../source/forms.rst:59
msgid ""
"If you want a field to be a dropdown menu with a list of choices, set "
"``choices=``:"
msgstr "如果你想让字段表现为一个有一系列选项的下拉菜单，设置 ``choices=``:"

#: ../../source/forms.rst:68
msgid ""
"To use radio buttons instead of a dropdown menu, you should set the "
"``widget`` to ``RadioSelect`` or ``RadioSelectHorizontal``:"
msgstr ""
"使用单选按钮而不是下拉菜单，应当设置 ``widget`` 为 ``RadioSelect`` 或 "
"``RadioSelectHorizontal``:"

#: ../../source/forms.rst:78
msgid ""
"If the list of choices needs to be determined dynamically, use "
":ref:`FOO_choices`"
msgstr "如果选项的列表是被动态决定的，使用 :ref:`FOO_choices`"

#: ../../source/forms.rst:80
msgid ""
"You can also set display names for each choice by making a list of "
"[value, display] pairs:"
msgstr "你也可以通过一个[value, display] 对的列表来显示每一个选项的名字："

#: ../../source/forms.rst:93
msgid ""
"If you do this, users will just see a menu with \"Low\", \"Medium\", "
"\"High\", but their responses will be recorded as 1, 2, or 3."
msgstr "如果这样设置了，用户就会看见一个有\"Low\", \"Medium\", \"High\"的菜单，但是得到的值仍会被记录为1，2，或 3。"

#: ../../source/forms.rst:96
msgid "You can do this for ``BooleanField``, ``StringField``, etc.:"
msgstr "你可以这样设置 ``BooleanField``，``StringField``，等等:"

#: ../../source/forms.rst:107
msgid ""
"You can get the human-readable label corresponding to the user's choice "
"like this:"
msgstr "你可以通过类似下面的方法获得一个与用户的选择对应的人类可读的标签："

#: ../../source/forms.rst:116
msgid "``field_display`` is new in oTree 5.4 (August 2021)."
msgstr "``field_display`` 在oTree 5.4（2021年8月）中新引入。"

#: ../../source/forms.rst:119
msgid "Optional fields"
msgstr "可选字段"

#: ../../source/forms.rst:121
msgid "If a field is optional, you can use ``blank=True`` like this:"
msgstr "如果一个字段是可选的，你可以像下面这样设置 ``blank=True`` ："

#: ../../source/forms.rst:130
msgid "Dynamic form field validation"
msgstr "动态表单验证"

#: ../../source/forms.rst:132
msgid ""
"The ``min``, ``max``, and ``choices`` described above are only for fixed "
"(constant) values."
msgstr "上述的 ``min``，``max``，与 ``choices`` 仅为固定值（常量）。"

# function
#: ../../source/forms.rst:135
msgid ""
"If you want them to be determined dynamically (e.g. different from player"
" to player), then you can instead define one of the below functions."
msgstr "如果你想让它们动态地被决定（例如在不同玩家间有区别），那么你可以定义下面这些函数。"

#: ../../source/forms.rst:142
msgid "{field_name}_choices()"
msgstr "{field_name}_choices()"

#: ../../source/forms.rst:144
msgid ""
"Like setting ``choices=``, this will set the choices for the form field "
"(e.g. the dropdown menu or radio buttons)."
msgstr "与设置了 ``choices=`` 相同，这一方法会设置表单字段的选项（例如下拉菜单或者单选按钮）。"

#: ../../source/forms.rst:148
msgid "Example:"
msgstr "例如："

#: ../../source/forms.rst:165
msgid "{field_name}_max()"
msgstr "{field_name}_max()"

#: ../../source/forms.rst:167
msgid ""
"The dynamic alternative to setting ``max=`` in the model field. For "
"example:"
msgstr "此函数为在模型字段中动态地设置 ``max=`` 的方法。例如："

#: ../../source/forms.rst:180
msgid "{field_name}_min()"
msgstr "{field_name}_min()"

#: ../../source/forms.rst:182
msgid "The dynamic alternative to setting ``min=`` on the model field."
msgstr "此函数为在模型字段中动态地设置 ``min=`` 的方法。"

#: ../../source/forms.rst:187
msgid "{field_name}_error_message()"
msgstr "{field_name}_error_message()"

#: ../../source/forms.rst:189
msgid "This is the most flexible method for validating a field."
msgstr "这是验证一个字段的最灵活的方法。"

#: ../../source/forms.rst:206
msgid "Validating multiple fields together"
msgstr "同时验证多个字段"

# function
#: ../../source/forms.rst:208
msgid ""
"Let's say your form has 3 number fields whose values must sum to 100. You"
" can enforce this with the ``error_message`` function, which goes on the "
"page:"
msgstr "假设你的表单中有3个数字字段，它们的和必须为100。你可以通过 ``error_message`` 函数确保这一点，在页面中："

#: ../../source/forms.rst:224
msgid "Notes:"
msgstr "注意："

#: ../../source/forms.rst:226
msgid ""
"If a field was left blank (and you set ``blank=True``), its value here "
"will be ``None``."
msgstr "如果一个字段未被填写（并且你设置了 ``blank=True``），它的值就会为 ``None``。"

# function
#: ../../source/forms.rst:227
msgid "This function is only executed if there are no other errors in the form."
msgstr "此函数仅会在表单中没有任何其他错误的情况下会被执行。"

#: ../../source/forms.rst:228
msgid ""
"You can also return a dict that maps field names to error messages. This "
"way, you don't need to write many repetitive FIELD_error_message methods "
"(see :ref:`here <duplicate_validation_methods>`)."
msgstr ""
"你也可以返回一个记录着字段名及其对应的错误信息的字典。在这种方法中，你不需要写很多重复的FIELD_error_message方法（参考 "
":ref:`这里 <duplicate_validation_methods>`）。"

#: ../../source/forms.rst:235
msgid "Determining form fields dynamically"
msgstr "动态决定表单字段"

#: ../../source/forms.rst:237
msgid ""
"If you need the list of form fields to be dynamic, instead of "
"``form_fields`` you can define a function ``get_form_fields``:"
msgstr "如果你需要表单字段是动态的，你可以定义 ``get_form_fields`` 函数取代 ``form_fields`` ："

#: ../../source/forms.rst:251
msgid "Widgets"
msgstr "控件"

#: ../../source/forms.rst:253
msgid ""
"You can set a model field's ``widget`` to ``RadioSelect`` or "
"``RadioSelectHorizontal`` if you want choices to be displayed with radio "
"buttons, instead of a dropdown menu."
msgstr ""
"你可以设定一个模型字段的 ``widget`` 为 ``RadioSelect`` 或 ``RadioSelectHorizontal`` "
"如果你想让选项表现为单选按钮而不是下拉菜单的话。"

#: ../../source/forms.rst:258
msgid "{{ formfield }}"
msgstr "{{ formfield }}"

#: ../../source/forms.rst:260
msgid ""
"If you want to position the fields individually, instead of ``{{ "
"formfields }}`` you can use ``{{ formfield }}``:"
msgstr "如果你想分别设定字段的位置，可以使用 ``{{ formfield }}`` 替代 ``{{ formfields }}`` ："

#: ../../source/forms.rst:268
msgid "You can also put the ``label`` in directly in the template:"
msgstr "你也可以将 ``label`` 直接放在模板中："

#: ../../source/forms.rst:274
#, python-format
msgid "The previous syntax of ``{% formfield player.bid %}`` is still supported."
msgstr "之前的语法 ``{% formfield player.bid %}`` 仍然可用。"

#: ../../source/forms.rst:279
msgid "Customizing a field's appearance"
msgstr "定制字段的外观"

#: ../../source/forms.rst:281
msgid ""
"``{{ formfields }}`` and ``{{ formfield }}`` are easy to use because they"
" automatically output all necessary parts of a form field (the input, the"
" label, and any error messages), with Bootstrap styling."
msgstr ""
"``{{ formfields }}`` 与 ``{{ formfield }}`` "
"很容易使用，因为它们自动输出了一个表单字段所必需的所有部分（输入框，标签，错误信息），并使用Bootstrap的样式。"

# please double check
#: ../../source/forms.rst:285
msgid ""
"However, if you want more control over the appearance and layout, you can"
" use manual field rendering. Instead of ``{{ formfield 'my_field' }}``, "
"do ``{{ form.my_field }}``, to get just the input element. Just remember "
"to also include ``{{ formfield_errors 'my_field' }}``."
msgstr ""
"然而，如果你想要自己更多地控制外观与布局，你可以使用手动字段渲染。使用 ``{{ form.my_field }}``，而不是 ``{{ "
"formfield 'my_field' }}`` 来获取输入元素。只需记得还要包含 ``{{ formfield_errors "
"'my_field' }}``。"

#: ../../source/forms.rst:291
msgid "Example: Radio buttons arranged like a slider"
msgstr ""

#: ../../source/forms.rst:315
msgid "Example: Radio buttons in tables and other custom layouts"
msgstr "例子：表格中的单选按钮与其他定制布局"

#: ../../source/forms.rst:317
msgid "Let's say you have a set of ``IntegerField`` in your model:"
msgstr "假定你在模型中有很多 ``IntegerField`` ："

#: ../../source/forms.rst:328
msgid ""
"And you'd like to present them as a likert scale, where each option is in"
" a separate column."
msgstr "并且你想要它们表现得像李克特量表，每一个选项在独立的一列中。"

# Chris comment: models.py doesn't exist anymore.
#: ../../source/forms.rst:331
msgid ""
"(First, try to reduce the code duplication in your model by following the"
" instructions in :ref:`many-fields`.)"
msgstr "（首先，试着消除你的模型中的代码冗余，根据 :ref:`many-fields` 中的提示。）"

#: ../../source/forms.rst:334
msgid ""
"Because the options must be in separate table cells, the ordinary "
"``RadioSelectHorizontal`` widget will not work here."
msgstr "由于选项必须在独立的表格单元中，原生的 ``RadioSelectHorizontal`` 控件不会正常工作。"

#: ../../source/forms.rst:337
msgid "Instead, you should simply loop over the choices in the field as follows:"
msgstr "作为替代方案，你应当简单地通过循环重复字段的选项，如下所示："

#: ../../source/forms.rst:348
msgid ""
"If you have many fields with the same number of choices, you can arrange "
"them in a table:"
msgstr "如果数个字段均有相同数量的选项，你可以将其组织成表格："

#: ../../source/forms.rst:367
msgid "Raw HTML widgets"
msgstr "原始HTML控件"

#: ../../source/forms.rst:369
msgid ""
"If ``{{ formfields }}`` and :ref:`manual field rendering <manual-forms>` "
"don't give you the appearance you want, you can write your own widget in "
"raw HTML. However, you will lose the convenient features handled "
"automatically by oTree. For example, if the form has an error and the "
"page re-loads, all entries by the user may be wiped out."
msgstr ""
"如果 ``{{ formfields }}`` 与 :ref:`手动字段渲染 <manual-forms>` "
"不能实现你想要的外观，你可以使用原始HTML写你自己的控件。然而，这样做会失去由oTree自动处理的一些便捷的特性。举例来说，如果表单有一个错误并且页面重载了，所有用户已经输入的条目可能被清除。"

#: ../../source/forms.rst:376
msgid ""
"First, add an ``<input>`` element. For example, if your ``form_fields`` "
"includes ``my_field``, you can do ``<input name=\"my_field\" "
"type=\"checkbox\" />`` (some other common types are ``radio``, ``text``, "
"``number``, and ``range``)."
msgstr ""
"首先，添加一个 ``<input>`` 元素。例如，如果你的 ``form_fields`` 包含 ``my_field``，你可以这样写： "
"``<input name=\"my_field\" type=\"checkbox\" />`` （其他一些常见的type为 "
"``radio``，``text``，``number``，与 ``range``）。"

#: ../../source/forms.rst:381
msgid ""
"Second, you should usually include ``{{ formfield_errors 'xyz' }}``, so "
"that if the participant submits an incorrect or missing value), they can "
"see the error message."
msgstr ""
"其次，你通常应当包含 ``{{ formfield_errors 'xyz' "
"}}``，这样如果参与人提交了一个不正确的值或者缺少了某些值时，他们就可以看见报错信息。"

#: ../../source/forms.rst:387
msgid "Raw HTML example: custom user interface with JavaScript"
msgstr "原始HTML的例子：使用JavaScript定制用户界面"

#: ../../source/forms.rst:389
msgid ""
"Let's say you don't want users to fill out form fields, but instead "
"interact with some sort of visual app, like a clicking on a chart or "
"playing a graphical game. Or, you want to record extra data like how long"
" they spent on part of the page, how many times they clicked, etc."
msgstr "假设你不想让用户填写表单，而是与某种可视化的应用交互，比如在图表上点击或者玩一个图形游戏等等。或者，你想要记录一些额外数据，比如用户在页面的某个部分花了多少时间，用户点击了多少次，诸如此类。"

#: ../../source/forms.rst:394
msgid ""
"First, build your interface using HTML and JavaScript. Then use "
"JavaScript to write the results into a hidden form field. For example:"
msgstr "首先，使用HTML与JavaScript构建你的界面。然后使用JavaScript将结果写入一个隐藏的表单字段中。例如："

#: ../../source/forms.rst:412
msgid ""
"When the page is submitted, the value of your hidden input will be "
"recorded in oTree like any other form field."
msgstr "当页面被提交的时候，隐藏输入中的值会被记录到oTree中，如其他表单字段一样。"

#: ../../source/forms.rst:415
msgid ""
"If this isn't working, open your browser's JavaScript console, see if "
"there are any errors, and use ``console.log()`` (JavaScript's equivalent "
"of ``print()``) to trace the execution of your code line by line."
msgstr ""
"如果它没有正常工作，打开你浏览器的JavaScript控制台，查看是否有错误，并使用 ``console.log()`` "
"（JavaScript中的 ``print()``）来逐行地追踪你代码的执行。"

#: ../../source/forms.rst:420
msgid "Buttons"
msgstr "按钮"

#: ../../source/forms.rst:423
msgid "Button that submits the form"
msgstr "提交表单的按钮"

#: ../../source/forms.rst:425
msgid ""
"If your page only contains 1 decision, you could omit the ``{{ "
"next_button }}`` and instead have the user click on one of several "
"buttons to go to the next page."
msgstr "如果你的页面只包含一个问题，你可以忽略 ``{{ next_button }}`` ，并让用户在一系列按钮中点击一个，并前往下一个页面。"

#: ../../source/forms.rst:430
msgid ""
"For example, let's say your Player model has ``offer_accepted = "
"models.BooleanField()``, and rather than a radio button you'd like to "
"present it as a button like this:"
msgstr ""
"举例来说，假定你的玩家模型有 ``offer_accepted = models.BooleanField()``, "
"并且你希望像下面这样展示按钮，而不是一个单选按钮："

#: ../../source/forms.rst:436
msgid ""
"First, put ``offer_accepted`` in your Page's ``form_fields`` as usual. "
"Then put this code in the template:"
msgstr "首先，将 ``offer_accepted`` 放入你的页面的 ``form_fields`` 。然后将这样的代码放入模板中："

#: ../../source/forms.rst:445
msgid ""
"You can use this technique for any type of field, not just "
"``BooleanField``."
msgstr "你可以在任何类型的字段上使用这个技巧，不只是 ``BooleanField``。"

#: ../../source/forms.rst:449
msgid "Button that doesn't submit the form"
msgstr "非提交表单的按钮"

#: ../../source/forms.rst:451
msgid ""
"If the button has some purpose other than submitting the form, add "
"``type=\"button\"``:"
msgstr "如果按钮有别的用途，而不是用来提交表单，添加 ``type=\"button\"``:"

#: ../../source/forms.rst:466
msgid "Miscellaneous & advanced"
msgstr "杂项与进阶"

#: ../../source/forms.rst:471
msgid "JavaScript access to form inputs"
msgstr ""

#: ../../source/forms.rst:475
msgid "New in oTree 5.6 (December 2021)"
msgstr ""

#: ../../source/forms.rst:477
msgid ""
"In your JavaScript code you can use ``formInputs.xyz`` to access the "
"``<input>`` element of form field ``xyz``. For example, you can do:"
msgstr ""

#: ../../source/forms.rst:498
msgid "Form fields with dynamic labels"
msgstr "具有动态标签的表单字段"

#: ../../source/forms.rst:500
msgid ""
"If the label should contain a variable, you can construct the string in "
"your page:"
msgstr "如果标签包含变量，你可以在页面中构建字符串："

#: ../../source/forms.rst:514
msgid "Then, in the template:"
msgstr "然后在模板中："

#: ../../source/forms.rst:520
msgid ""
"If you use this technique, you may also want to use "
":ref:`dynamic_validation`."
msgstr "如果你想使用这个技巧，你可能也想使用 :ref:`dynamic_validation`。"

